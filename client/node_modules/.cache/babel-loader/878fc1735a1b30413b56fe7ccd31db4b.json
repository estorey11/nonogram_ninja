{"ast":null,"code":"import _defineProperty from \"/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst defaultGrid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];\nconst defaultNonograms = [{\n  id: 0,\n  height: 5,\n  width: 5,\n  solution: '0000000000000000000000000'\n}];\nexport default function manageNon(state = {\n  grid: defaultGrid,\n  gridSolution: defaultGrid,\n  isFetching: false,\n  nonograms: defaultNonograms,\n  rowClues: [],\n  colClues: [],\n  isDragging: false\n}, action) {\n  switch (action.type) {\n    case 'MOUSE_DOWN_ON_CELL':\n      return _objectSpread({}, state, {\n        grid: newGridFromCLick(action.coords, [...state.grid]),\n        isDragging: true\n      });\n\n    case 'MOUSE_OVER_CELL':\n      if (state.isDragging) {}\n\n    case 'START_NON_REQUEST':\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case 'ADD_NONOGRAMS':\n      return _objectSpread({}, state, {\n        isFetching: false,\n        nonograms: action.nonograms\n      });\n\n    case 'SET_GRID_SOLUTION_AND_CLUES':\n      return _objectSpread({}, state, {\n        gridSolution: action.gridSolution,\n        rowClues: action.rowClues,\n        colClues: action.colClues,\n        grid: action.grid\n      });\n\n    case 'RIGHT_CLICK_CELL':\n      const rCoords = action.coords.split(',');\n      const rX = parseInt(rCoords[0]);\n      const rY = parseInt(rCoords[1]);\n      let rClickedGrid = [...state.grid];\n      rClickedGrid[rY][rX] = rClickedGrid[rY][rX] != 'X' ? 'X' : 0;\n      return _objectSpread({}, state, {\n        grid: rClickedGrid\n      });\n\n    default:\n      return state;\n  }\n}\n;\n\nfunction newGridFromCLick(coords, grid) {\n  const parsedCoords = coords.split(',');\n  const x = parseInt(parsedCoords[0]);\n  const y = parseInt(parsedCoords[1]);\n  let clickedGrid = grid;\n  clickedGrid[y][x] = clickedGrid[y][x] === 0 ? 1 : 0;\n  return clickedGrid;\n}","map":{"version":3,"sources":["/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/src/reducers/manageNon.js"],"names":["defaultGrid","defaultNonograms","id","height","width","solution","manageNon","state","grid","gridSolution","isFetching","nonograms","rowClues","colClues","isDragging","action","type","newGridFromCLick","coords","rCoords","split","rX","parseInt","rY","rClickedGrid","parsedCoords","x","y","clickedGrid"],"mappings":";;;;;;AAAA,MAAMA,WAAW,GAAC,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAD,EAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAb,EAAyB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAzB,EAAqC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAArC,EAAiD,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAjD,CAAlB;AACA,MAAMC,gBAAgB,GAAC,CAAC;AAACC,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,MAAM,EAAE,CAAf;AAAkBC,EAAAA,KAAK,EAAE,CAAzB;AAA4BC,EAAAA,QAAQ,EAAE;AAAtC,CAAD,CAAvB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAK,GAAG;AACxCC,EAAAA,IAAI,EAAER,WADkC;AACrBS,EAAAA,YAAY,EAAET,WADO;AACMU,EAAAA,UAAU,EAAE,KADlB;AACyBC,EAAAA,SAAS,EAAEV,gBADpC;AACsDW,EAAAA,QAAQ,EAAE,EADhE;AACoEC,EAAAA,QAAQ,EAAE,EAD9E;AACkFC,EAAAA,UAAU,EAAE;AAD9F,CAA3B,EAEZC,MAFY,EAEJ;AACT,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,oBAAL;AACE,+BACKT,KADL;AAEEC,QAAAA,IAAI,EAAES,gBAAgB,CAACF,MAAM,CAACG,MAAR,EAAgB,CAAC,GAAGX,KAAK,CAACC,IAAV,CAAhB,CAFxB;AAE0DM,QAAAA,UAAU,EAAE;AAFtE;;AAKF,SAAK,iBAAL;AAEE,UAAIP,KAAK,CAACO,UAAV,EAAqB,CAAE;;AAEzB,SAAK,mBAAL;AAEE,+BAAWP,KAAX;AAAkBG,QAAAA,UAAU,EAAE;AAA9B;;AAEF,SAAK,eAAL;AAEE,+BAAWH,KAAX;AAAkBG,QAAAA,UAAU,EAAE,KAA9B;AAAqCC,QAAAA,SAAS,EAAEI,MAAM,CAACJ;AAAvD;;AAEF,SAAK,6BAAL;AAEE,+BAAWJ,KAAX;AAAkBE,QAAAA,YAAY,EAAEM,MAAM,CAACN,YAAvC;AAAqDG,QAAAA,QAAQ,EAAEG,MAAM,CAACH,QAAtE;AAAgFC,QAAAA,QAAQ,EAAEE,MAAM,CAACF,QAAjG;AAA2GL,QAAAA,IAAI,EAAEO,MAAM,CAACP;AAAxH;;AAEF,SAAK,kBAAL;AAEE,YAAMW,OAAO,GAAGJ,MAAM,CAACG,MAAP,CAAcE,KAAd,CAAoB,GAApB,CAAhB;AACA,YAAMC,EAAE,GAAGC,QAAQ,CAACH,OAAO,CAAC,CAAD,CAAR,CAAnB;AACA,YAAMI,EAAE,GAAGD,QAAQ,CAACH,OAAO,CAAC,CAAD,CAAR,CAAnB;AACA,UAAIK,YAAY,GAAG,CAAC,GAAGjB,KAAK,CAACC,IAAV,CAAnB;AAEAgB,MAAAA,YAAY,CAACD,EAAD,CAAZ,CAAiBF,EAAjB,IAAsBG,YAAY,CAACD,EAAD,CAAZ,CAAiBF,EAAjB,KAAsB,GAAtB,GAA4B,GAA5B,GAAkC,CAAxD;AAEA,+BACKd,KADL;AAEEC,QAAAA,IAAI,EAAEgB;AAFR;;AAKF;AACE,aAAOjB,KAAP;AAvCJ;AA0CD;AAAA;;AAED,SAASU,gBAAT,CAA0BC,MAA1B,EAAkCV,IAAlC,EAAuC;AACrC,QAAOiB,YAAY,GAAGP,MAAM,CAACE,KAAP,CAAa,GAAb,CAAtB;AACA,QAAOM,CAAC,GAAGJ,QAAQ,CAACG,YAAY,CAAC,CAAD,CAAb,CAAnB;AACA,QAAOE,CAAC,GAAGL,QAAQ,CAACG,YAAY,CAAC,CAAD,CAAb,CAAnB;AACA,MAAKG,WAAW,GAAGpB,IAAnB;AACAoB,EAAAA,WAAW,CAACD,CAAD,CAAX,CAAeD,CAAf,IAAmBE,WAAW,CAACD,CAAD,CAAX,CAAeD,CAAf,MAAoB,CAApB,GAAwB,CAAxB,GAA4B,CAA/C;AAEA,SAAOE,WAAP;AACD","sourcesContent":["const defaultGrid=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\nconst defaultNonograms=[{id:0, height: 5, width: 5, solution: '0000000000000000000000000'}]\n\nexport default function manageNon(state = {\n  grid: defaultGrid, gridSolution: defaultGrid, isFetching: false, nonograms: defaultNonograms, rowClues: [], colClues: [], isDragging: false\n}, action) {\n  switch (action.type) {\n\n    case 'MOUSE_DOWN_ON_CELL':\n      return {\n        ...state,\n        grid: newGridFromCLick(action.coords, [...state.grid]), isDragging: true\n      }\n\n    case 'MOUSE_OVER_CELL':\n\n      if (state.isDragging){}\n\n    case 'START_NON_REQUEST':\n\n      return {...state, isFetching: true}\n\n    case 'ADD_NONOGRAMS':\n\n      return {...state, isFetching: false, nonograms: action.nonograms}\n\n    case 'SET_GRID_SOLUTION_AND_CLUES':\n\n      return {...state, gridSolution: action.gridSolution, rowClues: action.rowClues, colClues: action.colClues, grid: action.grid}\n\n    case 'RIGHT_CLICK_CELL':\n\n      const rCoords = action.coords.split(',')\n      const rX = parseInt(rCoords[0])\n      const rY = parseInt(rCoords[1])\n      let rClickedGrid = [...state.grid]\n\n      rClickedGrid[rY][rX]=(rClickedGrid[rY][rX]!='X' ? 'X' : 0)\n\n      return {\n        ...state,\n        grid: rClickedGrid\n      }\n\n    default:\n      return state;\n\n  }\n};\n\nfunction newGridFromCLick(coords, grid){\n  const  parsedCoords = coords.split(',')\n  const  x = parseInt(parsedCoords[0])\n  const  y = parseInt(parsedCoords[1])\n  let  clickedGrid = grid\n  clickedGrid[y][x]=(clickedGrid[y][x]===0 ? 1 : 0)\n\n  return clickedGrid\n}\n"]},"metadata":{},"sourceType":"module"}