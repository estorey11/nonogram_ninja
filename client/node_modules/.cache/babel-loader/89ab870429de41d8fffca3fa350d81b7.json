{"ast":null,"code":"import _defineProperty from \"/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { newGridFromCLick } from './manageNon';\nconst defaultGrid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];\nexport default function manageNewNon(state = {\n  grid: defaultGrid,\n  isFetching: false\n}, action) {\n  switch (action.type) {\n    case 'RESIZE_GRID':\n      let grid = [];\n      let row = [];\n\n      for (let i = 0; i < action.yLength; i++) {\n        row = [];\n\n        for (let j = 0; j < action.xLength; j++) {\n          if (state.grid[i]) {\n            row[j] = state.grid[i][j] || 0;\n          } else {\n            row[j] = 0;\n          }\n        }\n\n        grid[i] = row;\n      }\n\n      return _objectSpread({}, state, {\n        grid: grid\n      });\n\n    case 'NEW_SWITCH_CELL':\n      return _objectSpread({}, state, {\n        grid: newGridFromCLick(action.coords, [...state.grid])\n      });\n\n    case 'START_NON_POST':\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case 'REQUEST_SUCCEEDED':\n      return _objectSpread({}, state, {\n        isFetching: false,\n        grid: defaultGrid\n      });\n\n    case 'REQUEST_FAILED':\n      return _objectSpread({}, state, {\n        isFetching: false\n      });\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/src/reducers/manageNewNon.js"],"names":["newGridFromCLick","defaultGrid","manageNewNon","state","grid","isFetching","action","type","row","i","yLength","j","xLength","coords"],"mappings":";;;;;;AAAA,SAAQA,gBAAR,QAA+B,aAA/B;AAEA,MAAMC,WAAW,GAAC,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAD,EAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAb,EAAyB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAzB,EAAqC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAArC,EAAiD,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAjD,CAAlB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAG;AAC3CC,EAAAA,IAAI,EAAEH,WADqC;AACxBI,EAAAA,UAAU,EAAE;AADY,CAA9B,EAEZC,MAFY,EAEJ;AACT,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,aAAL;AAEE,UAAIH,IAAI,GAAC,EAAT;AACA,UAAII,GAAG,GAAC,EAAR;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,OAA3B,EAAoCD,CAAC,EAArC,EAAwC;AACtCD,QAAAA,GAAG,GAAE,EAAL;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,OAA3B,EAAoCD,CAAC,EAArC,EAAwC;AACtC,cAAIR,KAAK,CAACC,IAAN,CAAWK,CAAX,CAAJ,EAAkB;AAACD,YAAAA,GAAG,CAACG,CAAD,CAAH,GAAQR,KAAK,CAACC,IAAN,CAAWK,CAAX,EAAcE,CAAd,KAAoB,CAA5B;AAA8B,WAAjD,MACK;AAACH,YAAAA,GAAG,CAACG,CAAD,CAAH,GAAQ,CAAR;AAAU;AACjB;;AACDP,QAAAA,IAAI,CAACK,CAAD,CAAJ,GAAQD,GAAR;AACD;;AAED,+BACKL,KADL;AAEEC,QAAAA,IAAI,EAAEA;AAFR;;AAKF,SAAK,iBAAL;AAIE,+BACKD,KADL;AAEEC,QAAAA,IAAI,EAAEJ,gBAAgB,CAACM,MAAM,CAACO,MAAR,EAAgB,CAAC,GAAGV,KAAK,CAACC,IAAV,CAAhB;AAFxB;;AAKF,SAAK,gBAAL;AAEE,+BAAWD,KAAX;AAAkBE,QAAAA,UAAU,EAAE;AAA9B;;AAEF,SAAK,mBAAL;AAEE,+BAAWF,KAAX;AAAkBE,QAAAA,UAAU,EAAE,KAA9B;AAAqCD,QAAAA,IAAI,EAAEH;AAA3C;;AAEF,SAAK,gBAAL;AAEE,+BAAWE,KAAX;AAAkBE,QAAAA,UAAU,EAAE;AAA9B;;AAGF;AACE,aAAOF,KAAP;AA5CJ;AA+CD;AAAA","sourcesContent":["import {newGridFromCLick} from './manageNon'\n\nconst defaultGrid=[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n\nexport default function manageNewNon(state = {\n  grid: defaultGrid, isFetching: false,\n}, action) {\n  switch (action.type) {\n\n    case 'RESIZE_GRID':\n\n      let grid=[]\n      let row=[]\n\n      for (let i = 0; i < action.yLength; i++){\n        row =[];\n        for (let j = 0; j < action.xLength; j++){\n          if (state.grid[i]){row[j]= state.grid[i][j] || 0}\n          else {row[j]= 0}\n        }\n        grid[i]=row\n      }\n\n      return {\n        ...state,\n        grid: grid\n      }\n\n    case 'NEW_SWITCH_CELL':\n\n      \n\n      return {\n        ...state,\n        grid: newGridFromCLick(action.coords, [...state.grid])\n      }\n\n    case 'START_NON_POST':\n\n      return {...state, isFetching: true}\n\n    case 'REQUEST_SUCCEEDED':\n\n      return {...state, isFetching: false, grid: defaultGrid}\n\n    case 'REQUEST_FAILED':\n\n      return {...state, isFetching: false}\n\n\n    default:\n      return state;\n\n  }\n};\n"]},"metadata":{},"sourceType":"module"}