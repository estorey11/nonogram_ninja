{"ast":null,"code":"export function fetchNonograms() {\n  return dispatch => {\n    dispatch({\n      type: 'START_NON_REQUEST'\n    });\n    return fetch('/nonograms').then(response => response.json()).then(nonograms => dispatch({\n      type: 'ADD_NONOGRAMS',\n      nonograms\n    }));\n  };\n}\nexport function setSolutionAndCluesfromSpecs(height, width, solution) {\n  let grid = [];\n  let row = [];\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      row[x] = parseInt(solution.charAt(y + x));\n    }\n\n    grid[y] = row;\n  }\n}","map":{"version":3,"sources":["/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/src/actions/nonActions.js"],"names":["fetchNonograms","dispatch","type","fetch","then","response","json","nonograms","setSolutionAndCluesfromSpecs","height","width","solution","grid","row","y","x","parseInt","charAt"],"mappings":"AAAA,OAAO,SAASA,cAAT,GAA0B;AAC/B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA,WAAOC,KAAK,CAAC,YAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECG,SAAS,IAAIN,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBK,MAAAA;AAAzB,KAAD,CAFtB,CAAP;AAGD,GALD;AAMD;AAED,OAAO,SAASC,4BAAT,CAAsCC,MAAtC,EAA8CC,KAA9C,EAAqDC,QAArD,EAA8D;AAEnE,MAAIC,IAAI,GAAC,EAAT;AACA,MAAIC,GAAG,GAAC,EAAR;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAgC;AAC9B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAA+B;AAC7BF,MAAAA,GAAG,CAACE,CAAD,CAAH,GAAOC,QAAQ,CAACL,QAAQ,CAACM,MAAT,CAAgBH,CAAC,GAACC,CAAlB,CAAD,CAAf;AACD;;AACDH,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAQD,GAAR;AACD;AAIF","sourcesContent":["export function fetchNonograms() {\n  return (dispatch) => {\n    dispatch({ type: 'START_NON_REQUEST' });\n    return fetch('/nonograms')\n      .then(response => response.json())\n      .then(nonograms => dispatch({ type: 'ADD_NONOGRAMS', nonograms }));\n  };\n}\n\nexport function setSolutionAndCluesfromSpecs(height, width, solution){\n\n  let grid=[]\n  let row=[]\n\n  for (var y = 0; y < height; y++){\n    for (var x = 0; x < width; x++){\n      row[x]=parseInt(solution.charAt(y+x))\n    }\n    grid[y]=row\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}