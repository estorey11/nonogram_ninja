{"ast":null,"code":"export function fetchNonograms() {\n  return dispatch => {\n    dispatch({\n      type: 'START_NON_REQUEST'\n    });\n    return fetch('/nonograms').then(response => response.json()).then(nonograms => dispatch({\n      type: 'ADD_NONOGRAMS',\n      nonograms\n    }));\n  };\n}\n\nfunction createSolutionGrid(height, width, solution) {\n  let grid = [];\n  let row = [];\n\n  for (let y = 0; y < height; y++) {\n    row = [];\n\n    for (let x = 0; x < width; x++) {\n      row[x] = parseInt(solution.charAt(y * width + x));\n    }\n\n    grid[y] = row;\n  }\n\n  return grid;\n}\n\nfunction createRowClues(grid) {\n  let rowClues = grid.map(row => {\n    let clues = [0];\n    let chunk = -1;\n    let chunking = false;\n\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === 1 && chunking === false) {\n        chunking = true;\n        chunk++;\n        clues[chunk] = 1;\n      } else if (row[i] === 1 && chunking === true) {\n        clues[chunk]++;\n      } else if (row[i] === 0 && chunking === true) {\n        chunking = false;\n      }\n    }\n\n    return clues;\n  });\n  return rowClues;\n}\n\nfunction transposeArray(array) {\n  var newArray = [];\n\n  for (var i = 0; i < array.length; i++) {\n    newArray.push([]);\n  }\n\n  ;\n\n  for (var i = 0; i < array.length; i++) {\n    for (var j = 0; j < array.length; j++) {\n      newArray[j].push(array[i][j]);\n    }\n\n    ;\n  }\n\n  ;\n  return newArray;\n}\n\nexport function setSolutionAndCluesFromSpecs(height, width, solution) {\n  const grid = createSolutionGrid(height, width, solution);\n  const rowClues = createRowClues(grid);\n  const colClues = createRowClues(math.transpose(grid));\n  return dispatch => dispatch({\n    type: 'SET_GRID_SOLUTION_AND_CLUES',\n    grid,\n    rowClues,\n    colClues\n  });\n}","map":{"version":3,"sources":["/Users/eric_storey/Desktop/Flatiron/nonogram_ninja/client/src/actions/nonActions.js"],"names":["fetchNonograms","dispatch","type","fetch","then","response","json","nonograms","createSolutionGrid","height","width","solution","grid","row","y","x","parseInt","charAt","createRowClues","rowClues","map","clues","chunk","chunking","i","length","transposeArray","array","newArray","push","j","setSolutionAndCluesFromSpecs","colClues","math","transpose"],"mappings":"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","sourcesContent":["export function fetchNonograms() {\n  return (dispatch) => {\n    dispatch({ type: 'START_NON_REQUEST' });\n    return fetch('/nonograms')\n      .then(response => response.json())\n      .then(nonograms => dispatch({ type: 'ADD_NONOGRAMS', nonograms }));\n  };\n}\n\n\nfunction createSolutionGrid(height, width, solution){\n  let grid=[]\n  let row=[]\n\n  for (let y = 0; y < height; y++){\n    row=[]\n    for (let x = 0; x < width; x++){\n      row[x]=parseInt(solution.charAt(y*width+x))\n    }\n\n    grid[y]=row\n\n  }\n\n  return grid\n}\n\nfunction createRowClues(grid){\n  let rowClues=grid.map(row=>{\n\n    let clues=[0]\n    let chunk=-1\n    let chunking=false\n    for (let i = 0; i < row.length; i++){\n      if (row[i]===1 && chunking===false){\n        chunking=true\n        chunk++\n        clues[chunk]=1\n      }\n      else if (row[i]===1 && chunking===true) {\n        clues[chunk]++\n      }\n      else if (row[i]===0 && chunking===true) {\n        chunking=false\n      }\n    }\n    return clues\n  })\n\n  return rowClues\n}\n\nfunction transposeArray(array){\n    var newArray = [];\n    for(var i = 0; i < array.length; i++){\n        newArray.push([]);\n    };\n\n    for(var i = 0; i < array.length; i++){\n        for(var j = 0; j < array.length; j++){\n            newArray[j].push(array[i][j]);\n        };\n    };\n\n    return newArray;\n}\n\nexport function setSolutionAndCluesFromSpecs(height, width, solution){\n  const grid=createSolutionGrid(height, width, solution)\n  const rowClues=createRowClues(grid)\n  const colClues=createRowClues(math.transpose(grid))\n\n  return (dispatch)=> dispatch({type: 'SET_GRID_SOLUTION_AND_CLUES', grid, rowClues, colClues})\n}\n"]},"metadata":{},"sourceType":"module"}